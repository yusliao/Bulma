version: '3.8'

services:
  # 锂电池MES API服务 - 预发布环境
  battery-mes-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: battery-mes-api-staging
    ports:
      - "5000:80"
      - "5001:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      - mysql-master
      - mysql-slave
      - redis
      - influxdb
    volumes:
      - ./logs:/app/logs
      - ./ssl:/etc/ssl/certs
    networks:
      - battery-mes-staging
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL主库
  mysql-master:
    image: mysql:8.0
    container_name: battery-mes-mysql-master-staging
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=BatteryPackingMES_Staging
      - MYSQL_USER=battery_mes
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./config/mysql/master.cnf:/etc/mysql/conf.d/master.cnf
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password --server-id=1 --log-bin=mysql-bin --binlog-format=ROW
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # MySQL从库
  mysql-slave:
    image: mysql:8.0
    container_name: battery-mes-mysql-slave-staging
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=BatteryPackingMES_Staging
      - MYSQL_USER=battery_mes
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=utf8mb4
      - MYSQL_COLLATION_SERVER=utf8mb4_unicode_ci
    volumes:
      - mysql_slave_data:/var/lib/mysql
      - ./config/mysql/slave.cnf:/etc/mysql/conf.d/slave.cnf
    command: --default-authentication-plugin=mysql_native_password --server-id=2 --relay-log=mysql-relay --read-only=1
    depends_on:
      - mysql-master
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # Redis集群
  redis:
    image: redis:7-alpine
    container_name: battery-mes-redis-staging
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # InfluxDB时序数据库
  influxdb:
    image: influxdb:2.6
    container_name: battery-mes-influxdb-staging
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=battery-mes-staging
      - DOCKER_INFLUXDB_INIT_BUCKET=production-data-staging
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # Grafana监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: battery-mes-grafana-staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://staging-monitoring.battery-mes.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - influxdb
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: battery-mes-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/staging.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - battery-mes-api
    networks:
      - battery-mes-staging
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: battery-mes-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - battery-mes-staging
    restart: unless-stopped

networks:
  battery-mes-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_master_data:
    driver: local
  mysql_slave_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local 